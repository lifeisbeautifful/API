const responseJson = pm.response.json()


pm.test("Status code is 400", function () {
    pm.response.to.have.status(400);
});

pm.test("Status code name has string 'Bad Request'", function () {
    pm.response.to.have.status("Bad Request");
});

pm.test("Response time is less than 2000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(2000);
});

pm.test("Response json is not empty", ()=>{
    pm.response.to.be.json;
    pm.expect(responseJson).not.be.empty;
});

pm.test("Response 'code' field exists", ()=>{
    pm.expect(responseJson.code).to.exist;
});

pm.test("Response 'code' field is equal to 'rest_invalid_param'", ()=>{
    pm.expect(responseJson.code).to.eql("rest_invalid_param");
});

pm.test("Response 'message' field to exist", ()=>{
    pm.expect(responseJson.message).to.exist;
});

pm.test("Response 'message' field is equal to 'Неверный параметр: type'", ()=>{
    pm.expect(responseJson.message).to.eql("Неверный параметр: type");
});

pm.test("Response data type message is equal to 'type не принадлежит к simple, grouped, external и variable.'", ()=>{
    pm.expect(responseJson.data.params.type).to.eql("type не принадлежит к simple, grouped, external и variable.");
});

pm.test("Response details message is equal to 'type не принадлежит к simple, grouped, external и variable.'", ()=>{
    pm.expect(responseJson.data.details.type.message).to.eql("type не принадлежит к simple, grouped, external и variable.");
});

pm.test("Response details data is null", ()=>{
    pm.expect(responseJson.data.details.type.data).to.be.null;
});

pm.test("'Content-Type' header has expected value", ()=>{
    pm.expect(pm.response).to.have.header("Content-Type", "application/json; charset=UTF-8");
});

pm.test("'Allow' header has expected value", ()=>{
    pm.expect(pm.response).to.have.header("Allow", "GET, POST, PUT, PATCH, DELETE");
});

pm.test("'Cache-Control' header has expected value", ()=>{
    pm.expect(pm.response).to.have.header("Cache-Control", "no-cache, must-revalidate, max-age=0");
});

Body:

{
    "type": "level"
}
